
//Idea for a really simple systems implementation language.
//Using the exact same ideas
//that I learned from the assembler.
//It'll basically be... just the assembler with a fresher, nicer syntax.
//Functions may not take structs as arguments.
//Structs may only be passed as arguments.
//Local variables are always registers unless they don't fit in a register.

//it is not valid to declare without "static" outside of a function.
//because local storage is assumed otherwise.

#undef this_was_never_defined

static i32 myInt;
static f32 myFloat;

//Simulating having a huge number of duplicates of the same include...
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"
#include "cbas.hcb"



//Expression statement. Gets "compiled". Symbols are recognized as they were
//previously declared,
//they can also be pre-declared.
//Note that this is code that is being directly compiled right here... code generation happens
//right here, outside of a function.
//there is no IR or AST, we compile immediately.
//this simplifies things immensely!
//We also don't do two passes! Any forward references are handled by the assembler itself.

//ON SCOPES:
//Local variables have lifetimes determined by the "body" they were declared in.
//For register variables, this is harmless, and goto can do nothing bad.
//goto between different scopes can be bad, though.
//That has to be a documented limitation.

myInt = 7;

//expression statement.
myFloat = 0.7;

myFloat = cast(float)myInt;

//If we do nothing, we will walk right into a function body... pre-declare a function and call it.
fn main()->i32;
main();


//declare a function.
fn do_an_operation(i32 a, i32 b, byte c)->u64:
	i32 temp;
	if(c == 0)
		temp = a + b;
	end
	if(c == 1)
		temp = a - b;
	end
	if(c == 2)
		temp = a * b;
	end
	if(c == 3) temp = a / b; end
	if(c == 4) temp = a % b; end //imod
	if(c > 4)
		return do_an_operation(a,b,c-1);
	end
	return temp;
end

//strlen implementation

fn strlen(byte* c)->u64:
	//local variable declaration statement.
	u64 len;
	len = 0;
	while(c[0] != 0)
		len++;
		c++;
	end
	return len;
end

//"How do we do data?" in various formats.
//again, these are compiled IMMEDIATELY right here.
//So it gets turned immediately into something like this:
//:HelloWorldString:
//bytes 72,69,76,76,79,44,32 (...)
//there is no intermediate. There's not two passes.
//code is generated right here.

data string HelloWorldString "HELLO, World!\n";
data byte myByteArray 0,1,2,3,4,5;
data float myFloatArray 0.0, 1.3, 7.9;

//the "tail" gets turned immediately into a jump.
fn infloop():
	tail infloop;
end

//code generated immediately, wrapped by function prologue and epilogue
fn main()->i32:
	puts(HelloWorldString);
	asm("
		jmp q%infloop%;
	");
end

fn puts(byte* c):
	while(*c)
		byte q = *c;
		//the code inside of the asm block will be
		//verbatim copied into the assembly code.
		//it will be surrounded by //PRAGMA_NO_OPTIMIZE
		//in the optimization passes.
		asm("
			im8 $+0!,0;
			dwrite $+0!, $q;
		");
		c++; //could be replaced with asm("inc $c;");
		if(*c == 0)
			break; //this "knows" that the while loop is what it's in, it asks the while loop for its "end of loop" label,
			//and it takes advantage of it.
			//it also knows everything in every scope that it has to get rid of.
			//so it pops that.
		end
	end
end


//struct syntax:

struct mystruct
	f64 x;
	f64 y;
	f64 z;
end
