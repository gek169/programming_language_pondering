

codegen double* i_unused;

fn codegen pure get7()->i8:
	__builtin_puts("get7 called!");
	return 7;
end

fn codegen not_pure_function():end

fn codegen pure addnums(int a, int b)->int:
	return a+b;
end

fn codegen pure subnums(int a, int b)->int:
	//i_unused = cast(double*) 0;
	//not_pure_function();
	return a-b;
end

class myClass
	int x
	int y
	int z
end

class containsSubClass
	myClass alfred
	myClass bigboy
	sqword bruh
end	

class containsArrayOfSubclasses
	int a
	int b
	myClass[40] thingies
	int[400] integers
end


method codegen myClass:doStuff()->u64:
	if(this.x == 3)
		__builtin_puts("I can indeed see that.");
	end
	this.x = 3;
	return 0;
end

fn codegen assignArrayMember(int* a):
	a[3] = 2;
	return;
end

fn codegen manipClass(myClass* p):
	if(p.x == 3)
		__builtin_puts("I can also indeed see that.");
	end
	p.x = 3;
end

fn codegen switch_test(int a):

	switch(a) is1, is2, is3;
	:is1
		__builtin_puts("I see a 0!");
	return;
	:is2
		__builtin_puts("I see a 1!");
	return;

	:is3
		__builtin_puts("I see a 2!");
		__builtin_puts("Prepare for a test of FOR:");
	float i
		if(1)
			i = 0;
			for(i=1, i<=6, i++)
				int q;
				//goto getout;
				__builtin_puts("!");
				int j
				//break
				for(j = 0, j < 2, j++)
					__builtin_puts("I should print twice six times! Unless you put a break here:");continue break
				end
			end
			:getout
			__builtin_puts("Got out!");
		end
	return;

	return;

end


codegen int myGlobalLoopCounter = 10;
codegen double tail_test_pow = 0;

//not exactly using 'tail'...
fn codegen tail_test2()->u64:
	if(myGlobalLoopCounter > 0)
		myGlobalLoopCounter--;
		return 1 + tail_test2();
	end
	return 1.0e+1;
end

fn codegen tail_test()->i64:
	myGlobalLoopCounter--;
	tail_test_pow = tail_test_pow + tail_test_pow;
	if(myGlobalLoopCounter > 1)
		tail tail_test
	end
	return tail_test_pow;
end

fn pure impl_streq(char* a, char* b)->i64:
	qword i
	i = 0;
	for(i = 0, 1, i++)
		if(a[i]!=b[i]) return 0; end
		if(a[i] == b[i])
			if(a[i] == 0) return 1; end
		end
	end
end

fn streq_tester():

	char* a char* b int i

	a  = "Hello!";
	b = "Goodbye!";
	i = a streq b;

end



fn codegen codegen_main():
	myClass classy;
	myClass* f;
	classy.x = 3;
	double i;
	__builtin_puts("_______________________________");
	classy:doStuff();
	manipClass(classy);
	__builtin_puts("_______________________________");

	
	classy.x = 3;
	switch_test(2);


	f = classy;
	__builtin_puts("________________________Now for the real test!");
	f.x = 7;
	i = classy.x;

	
	if("Hello" strneq "Hello1")
		__builtin_puts("Yes!");
	elif(get7()&0)
		__builtin_puts("Maybe?");
	elseif( 0 & (get7() || get7()))
		__builtin_puts("Perhaps?");
	else
		__builtin_puts("No!");
	end

	containsSubClass qqq;
	qqq.alfred := classy;
	qqq.bigboy := cast(myClass*)f;
	(cast(myClass*)f).x = 3;
	i = qqq.bigboy.x;
	if(1)
		char[500] buf

		__builtin_itoa(buf, i);
		//buf[499] = 0;
		__builtin_puts("This is I after assigning from bigboy's x:");
		__builtin_puts(buf);

		__builtin_itoa(buf, 0x10000000000);
		//buf[499] = 0;
		__builtin_puts("This is a very large number:");
		__builtin_puts(buf);

		whomstvedaintly = 2.0 * 3.4;
		__builtin_ftoa(buf, whomstvedaintly);
		__builtin_puts("Here's whomstvedaintly:");
		__builtin_puts(buf);

		//declared at the end... oh! interesting...
		double whomstvedaintly
	end
	if(1)
			char[500] buf
			int* temp
		//test structs more thoroughly.
			containsArrayOfSubclasses fff;
			f.y = 17.3e-0;
			fff.thingies + 3 := f;
			i = (fff.thingies + 3).y;
		//
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning from fff.thingies of 3 dot y:");
			__builtin_puts(buf);

			(fff.thingies + 3).y = 400;
			f = fff.&thingies + 3;
			i = f.y;
		//
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning from fff.thingies of f.y, after f was assigned fff.thingies + 3:");
			__builtin_puts(buf);
			temp = fff.&integers;
			temp[37] = 12;
			temp[37] = 13;
			i = fff.integers[37];
			__builtin_itoa(buf, i);
			__builtin_puts("This is I after assigning to an aliased integer array in its members.:");
			__builtin_puts(buf);
	end

	i = 0;

	myGlobalLoopCounter = 3;
	tail_test_pow = 2.0;
	i = tail_test();
	if(1)
		char[500] buf;
		__builtin_itoa(buf, i);
		__builtin_puts("This is I after tail_test:");
		__builtin_puts(buf);
	end

	myGlobalLoopCounter = 10;
	i = tail_test2();
	if(1)
		char[500] buf;
		__builtin_itoa(buf, i);
		__builtin_puts("This is I after tail_test2:");
		__builtin_puts(buf);
	end

	i = subnums(3,0);


	
	while((i > 0) /*|| 1*/
	)
		__builtin_puts("count me");
		i--;
	end
	__builtin_puts("Goodbye!");
	return;
end
