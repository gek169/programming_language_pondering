


int myint;

fn add1(int a)->double:
	if(1)
		return !a * 7+3.0e-4;
		return a|7+3.0;
	end
	myint = cast(u64)--myint;
end

//used for testing tail
fn codegen incompatTail():


end
fn compatTail():


end


fn myFunction():
	while(1)
		continue
	end
	1 + 1 - 7.3;
	switch(cast(i8)1-1) j1,j2,j3;
	:j1
	for(0,0,0)
		int mylocalint;
		continue
		for(0,0,0)
			continue
		end
	end
	:j2
	:j3
	tail compatTail
end

fn implied_conversion_tester(int a, int b)->f64:

	int[30] myarray;
	a = cast(u64) b;
	myarray[a/b] = a - b;
	return 3^3|3;
end

fn codegen builtin_tester()->i8:
	u8* p;
	i64 myint;
	myint = ~myint;
	p = "Goodbye!";
	p[7] = myint;
	__builtin_puts(p);
	__builtin_exit(1);
	__builtin_memcpy(p,p,0);
	return cast(i64)p;
end

fn move_test(sqword squidward):
	int** a;
	int** b;
	int** c;
	c := a := b;
	a[0][1] = 3;
	a[2][cast(u64)squidward+1] = cast(int)a++;
end
